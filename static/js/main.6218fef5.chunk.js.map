{"version":3,"sources":["components/TodoItem/index.js","components/TodoList/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["TodoItem","props","console","log","React","createElement","id","item","className","type","checked","complete","task","TodoList","todoList","map","App","count","Promise","resolves","rejects","api","request","XMLHttpRequest","open","onload","status","JSON","parse","response","results","Error","statusText","onError","err","send","then","members","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2OAeeA,G,KAZE,SAACC,GAChBC,QAAQC,IAAIC,IAAMC,cAAc,KAAM,CAAEC,GAAI,aAAe,iBADjC,IAElBC,EAASN,EAATM,KACR,OACE,yBAAKC,UAAU,YACb,2BAAOC,KAAK,WAAWC,QAASH,EAAKI,WACrC,2BAAIJ,EAAKK,MACT,gCCQSC,G,KAdE,SAACZ,GAAW,IACnBa,EAAab,EAAba,SACR,OACE,yBAAKN,UAAU,YACb,0CACA,yBAAKA,UAAU,QACZM,EAASC,KAAI,SAACR,GACb,OAAO,kBAAC,EAAD,CAAUA,KAAMA,WCP3BO,G,MAAW,CACf,CACEF,KAAM,sBACND,UAAU,GAEZ,CACEC,KAAM,2BACND,UAAU,GAEZ,CACEC,KAAM,eACND,UAAU,GAEZ,CACEC,KAAM,4CACND,UAAU,GAEZ,CACEC,KAAM,2CACND,UAAU,KA4BCK,EAXH,WAbM,IAACC,EAiBjB,OAjBiBA,EAcP,EAbV,IAAIC,SAAQ,SAACC,EAAUC,GACrB,IAAMC,EAAG,oDAAgDJ,GACnDK,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAOH,GACpBC,EAAQG,OAAS,kBACI,MAAnBH,EAAQI,OACJP,EAASQ,KAAKC,MAAMN,EAAQO,UAAUC,SACtCV,EAAQW,MAAMT,EAAQU,cAC5BV,EAAQW,QAAU,SAACC,GAAD,OAASd,EAAQc,IACnCZ,EAAQa,WAKPC,MAAK,SAACC,GAAD,OAAanC,QAAQC,IAAIkC,MAC9BC,OAAM,SAACC,GAAD,OAAWrC,QAAQC,IAAIoC,MAE9B,yBAAK/B,UAAU,OACb,kBAAC,EAAD,CAAUM,SAAUA,MClCN0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMgB,c","file":"static/js/main.6218fef5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./TodoItem.css\";\n\nconst TodoItem = (props) => {\n  console.log(React.createElement(\"h1\", { id: \"receipe-0\" }, \"Baked Salmon\"));\n  const { item } = props;\n  return (\n    <div className=\"todoItem\">\n      <input type=\"checkbox\" checked={item.complete} />\n      <p>{item.task}</p>\n      <hr />\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"../TodoItem\";\nimport \"./TodoList.css\";\n\nconst TodoList = (props) => {\n  const { todoList } = props;\n  return (\n    <div className=\"todolist\">\n      <h2>To-do List</h2>\n      <div className=\"list\">\n        {todoList.map((item) => {\n          return <TodoItem item={item} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport TodoList from \"../TodoList\";\nimport \"./App.css\";\n\nconst todoList = [\n  {\n    task: \"Go for the shopping\",\n    complete: true,\n  },\n  {\n    task: \"Start preparing for exam\",\n    complete: true,\n  },\n  {\n    task: \"Book tickets\",\n    complete: false,\n  },\n  {\n    task: \"Pack the bags, and take one extra trolley\",\n    complete: true,\n  },\n  {\n    task: \"Web check-in and print the boarding pass\",\n    complete: false,\n  },\n];\n\nconst getPeople = (count) =>\n  new Promise((resolves, rejects) => {\n    const api = `https://api.randomuser.me/?nat=US&results=${count}`;\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", api);\n    request.onload = () =>\n      request.status === 200\n        ? resolves(JSON.parse(request.response).results)\n        : rejects(Error(request.statusText));\n    request.onError = (err) => rejects(err);\n    request.send();\n  });\n\nconst App = () => {\n  getPeople(5)\n    .then((members) => console.log(members))\n    .catch((error) => console.log(error));\n  return (\n    <div className=\"app\">\n      <TodoList todoList={todoList} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}